(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["/js/index"],{

/***/ "./resources/js/frontend/index.js":
/*!****************************************!*\
  !*** ./resources/js/frontend/index.js ***!
  \****************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var jquery_lazy__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jquery-lazy */ "./node_modules/jquery-lazy/jquery.lazy.js");
/* harmony import */ var jquery_lazy__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(jquery_lazy__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var jquery_lazy_jquery_lazy_plugins__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! jquery-lazy/jquery.lazy.plugins */ "./node_modules/jquery-lazy/jquery.lazy.plugins.js");
/* harmony import */ var jquery_lazy_jquery_lazy_plugins__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(jquery_lazy_jquery_lazy_plugins__WEBPACK_IMPORTED_MODULE_1__);


$(window).scroll(function () {
  updateBackground();
});

function updateBackground() {
  if ($(window).scrollTop() >= $('#about').offset().top - $('#nav').outerHeight() && $(window).scrollTop() < $('#career').offset().top - $('#nav').outerHeight()) {
    $('.fullscreen-bg').hide();
    $('.homeText').hide();
    $('footer').hide();
  } else if ($(window).scrollTop() >= $('#career').offset().top - $('#nav').outerHeight()) {
    $('.fullscreen-bg').hide();
    $('.homeText').hide();
    $('footer').show();
  } else {
    $('.fullscreen-bg').show();
    $('.homeText').show();
    $('footer').hide();
  }
} //made by vipul mirajkar thevipulm.appspot.com


var TxtType = function TxtType(el, toRotate, period) {
  this.toRotate = toRotate;
  this.el = el;
  this.loopNum = 0;
  this.period = parseInt(period, 10) || 2000;
  this.txt = '';
  this.tick();
  this.isDeleting = false;
};

TxtType.prototype.tick = function () {
  var i = this.loopNum % this.toRotate.length;
  var fullTxt = this.toRotate[i];

  if (this.isDeleting) {
    this.txt = fullTxt.substring(0, this.txt.length - 1);
  } else {
    this.txt = fullTxt.substring(0, this.txt.length + 1);
  }

  this.el.innerHTML = '<span class="wrap">' + this.txt + '</span>';
  var that = this;
  var delta = 200 - Math.random() * 100;

  if (this.isDeleting) {
    delta /= 2;
  }

  if (!this.isDeleting && this.txt === fullTxt) {
    delta = this.period;
    this.isDeleting = true;
  } else if (this.isDeleting && this.txt === '') {
    this.isDeleting = false;
    this.loopNum++;
    delta = 1000;
  }

  setTimeout(function () {
    that.tick();
  }, delta);
};

$(document).ready(function () {
  // var pattern = Trianglify({
  //     width: $(window).width(),
  //     height: $(window).height(),
  //     cell_size: 300,
  //     x_colors: ['#2B2B2B','#303335', '#3B3F41','#303335','#3B3F41','#303335','#2B2B2B'],
  //     y_colors: ['#2B2B2B','#303335', '#3B3F41','#303335','#3B3F41','#303335','#2B2B2B']
  // });
  //
  // $('.poly-background').append(pattern.canvas());
  $('.page-content').css('background-color', 'transparent');
  updateBackground();
  $('body').scrollspy();
  var elements = document.getElementsByClassName('typewrite');

  for (var i = 0; i < elements.length; i++) {
    var toRotate = elements[i].getAttribute('data-type');
    var period = elements[i].getAttribute('data-period');

    if (toRotate) {
      new TxtType(elements[i], JSON.parse(toRotate), period);
    }
  } // INJECT CSS


  var css = document.createElement("style");
  css.type = "text/css";
  css.innerHTML = ".typewrite > .wrap { border-right: 0.08em solid #fff}";
  document.body.appendChild(css);
  $("#nav ul li a[href^='#']").on('click', function (e) {
    // prevent default anchor click behavior
    e.preventDefault(); // store hash

    var hash = this.hash; // animate

    $('html, body').animate({
      scrollTop: $(hash).offset().top
    }, 1000, function () {
      // when done, add hash to url
      // (default click behaviour)
      window.location.hash = hash;
    });
  });
});
var iterate = false;
$(window).ready(function () {
  iterate = $('.about-image').each(function () {
    var imageElement = $(this);
    var image = $(this).data('image');

    if (image.length != 0) {
      var img = $('<img />').attr({
        'src': image
      }).on('load', function () {
        imageElement.css('background', 'url("' + image + '") center center');
        imageElement.css('background-size', 'cover');
      });
    }
  }); //Want it to load my about image first

  $.when(iterate).then(function () {
    loadOtherImages();
  });
});

function loadOtherImages() {
  $('.project-image').each(function () {
    var imageElement = $(this);
    var image = $(this).data('image');

    if (image.length != 0) {
      var img = $('<img />').attr({
        'src': image
      }).on('load', function () {
        imageElement.attr('src', image);
      });
    }
  });
  $('.project-bg-image').each(function () {
    var imageElement = $(this);
    var image = $(this).data('image');

    if (image.length != 0) {
      var img = $('<img />').attr({
        'src': image
      }).on('load', function () {
        imageElement.css('background', 'url("' + image + '") center center');
        imageElement.css('background-size', 'cover');
      });
    }
  });
  $(function () {
    $('.lazy').Lazy({});
  });
}

var $carousel = $('#carouselExampleIndicators');
$carousel.carousel();
var handled = false; //global variable

$carousel.bind('slide.bs.carousel', function (e) {
  var current = $(e.target).find('.carousel-item.active');
  var indx = $(current).index();
  if (indx + 2 > $('.carousel-indicators li').length) indx = -1;

  if (!handled) {
    $('.carousel-indicators li').removeClass('active');
    $('.carousel-indicators li:nth-child(' + (indx + 2) + ')').addClass('active');
  } else {
    handled = !handled; //if handled=true make it back to false to work normally.
  }
});
$(".carousel-indicators li").on('click', function () {
  //Click event for indicators
  $(this).addClass('active').siblings().removeClass('active'); //remove siblings active class and add it to current clicked item

  handled = true; //set global variable to true to identify whether indicator changing was handled or not.
});

/***/ }),

/***/ 1:
/*!**********************************************!*\
  !*** multi ./resources/js/frontend/index.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(/*! /Users/gregorysteenhagen/Desktop/ModernHobbyist/modern-hobbyist/resources/js/frontend/index.js */"./resources/js/frontend/index.js");


/***/ })

},[[1,"/js/manifest","/js/vendor"]]]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvanMvZnJvbnRlbmQvaW5kZXguanMiXSwibmFtZXMiOlsiJCIsIndpbmRvdyIsInNjcm9sbCIsInVwZGF0ZUJhY2tncm91bmQiLCJzY3JvbGxUb3AiLCJvZmZzZXQiLCJ0b3AiLCJvdXRlckhlaWdodCIsImhpZGUiLCJzaG93IiwiVHh0VHlwZSIsImVsIiwidG9Sb3RhdGUiLCJwZXJpb2QiLCJsb29wTnVtIiwicGFyc2VJbnQiLCJ0eHQiLCJ0aWNrIiwiaXNEZWxldGluZyIsInByb3RvdHlwZSIsImkiLCJsZW5ndGgiLCJmdWxsVHh0Iiwic3Vic3RyaW5nIiwiaW5uZXJIVE1MIiwidGhhdCIsImRlbHRhIiwiTWF0aCIsInJhbmRvbSIsInNldFRpbWVvdXQiLCJkb2N1bWVudCIsInJlYWR5IiwiY3NzIiwic2Nyb2xsc3B5IiwiZWxlbWVudHMiLCJnZXRFbGVtZW50c0J5Q2xhc3NOYW1lIiwiZ2V0QXR0cmlidXRlIiwiSlNPTiIsInBhcnNlIiwiY3JlYXRlRWxlbWVudCIsInR5cGUiLCJib2R5IiwiYXBwZW5kQ2hpbGQiLCJvbiIsImUiLCJwcmV2ZW50RGVmYXVsdCIsImhhc2giLCJhbmltYXRlIiwibG9jYXRpb24iLCJpdGVyYXRlIiwiZWFjaCIsImltYWdlRWxlbWVudCIsImltYWdlIiwiZGF0YSIsImltZyIsImF0dHIiLCJ3aGVuIiwidGhlbiIsImxvYWRPdGhlckltYWdlcyIsIkxhenkiLCIkY2Fyb3VzZWwiLCJjYXJvdXNlbCIsImhhbmRsZWQiLCJiaW5kIiwiY3VycmVudCIsInRhcmdldCIsImZpbmQiLCJpbmR4IiwiaW5kZXgiLCJyZW1vdmVDbGFzcyIsImFkZENsYXNzIiwic2libGluZ3MiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUVBQSxDQUFDLENBQUNDLE1BQUQsQ0FBRCxDQUFVQyxNQUFWLENBQWlCLFlBQVc7QUFDeEJDLGtCQUFnQjtB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QUNKLE1BQUcsQ0FBQ0wsT0FBSixFQUNBO0FBQ0k5RCxLQUFDLENBQUMseUJBQUQsQ0FBRCxDQUE2QnFFLFdBQTdCLENBQXlDLFFBQXpDO0FBQ0FyRSxLQUFDLENBQUMsd0NBQXNDbUUsSUFBSSxHQUFDLENBQTNDLElBQThDLEdBQS9DLENBQUQsQ0FBcURHLFFBQXJELENBQThELFFBQTlEO0FBQ0gsR0FKRCxNQU1BO0FBQ0lSLFdBQU8sR0FBQyxDQUFDQSxPQUFULENBREosQ0FDcUI7QUFDcEI7QUFDSixDQWZEO0FBaUJBOUQsQ0FBQyxDQUFDLHlCQUFELENBQUQsQ0FBNkIyQyxFQUE3QixDQUFnQyxPQUFoQyxFQUF3QyxZQUFVO0FBQzlDO0FBQ0EzQyxHQUFDLENBQUMsSUFBRCxDQUFELENBQVFzRSxRQUFSLENBQWlCLFFBQWpCLEVBQTJCQyxRQUEzQixHQUFzQ0YsV0FBdEMsQ0FBa0QsUUFBbEQsRUFGOEMsQ0FHOUM7O0FBQ0FQLFNBQU8sR0FBQyxJQUFSLENBSjhDLENBSWhDO0FBQ2pCLENBTEQsRSIsImZpbGUiOiIvanMvaW5kZXguanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgXCJqcXVlcnktbGF6eVwiO1xuaW1wb3J0IFwianF1ZXJ5LWxhenkvanF1ZXJ5LmxhenkucGx1Z2luc1wiO1xuXG4kKHdpbmRvdykuc2Nyb2xsKGZ1bmN0aW9uKCkge1xuICAgIHVwZGF0ZUJhY2tncm91bmQoKTtcbn0pO1xuXG5mdW5jdGlvbiB1cGRhdGVCYWNrZ3JvdW5kKCl7XG4gICAgaWYoJCh3aW5kb3cpLnNjcm9sbFRvcCgpID49ICgkKCcjYWJvdXQnKS5vZmZzZXQoKS50b3AgLSAkKCcjbmF2Jykub3V0ZXJIZWlnaHQoKSkgJiYgJCh3aW5kb3cpLnNjcm9sbFRvcCgpIDwgKCQoJyNjYXJlZXInKS5vZmZzZXQoKS50b3AgLSAkKCcjbmF2Jykub3V0ZXJIZWlnaHQoKSkpe1xuICAgICAgICAkKCcuZnVsbHNjcmVlbi1iZycpLmhpZGUoKTtcbiAgICAgICAgJCgnLmhvbWVUZXh0JykuaGlkZSgpO1xuICAgICAgICAkKCdmb290ZXInKS5oaWRlKCk7XG4gICAgfWVsc2UgaWYoJCh3aW5kb3cpLnNjcm9sbFRvcCgpID49ICgkKCcjY2FyZWVyJykub2Zmc2V0KCkudG9wIC0gJCgnI25hdicpLm91dGVySGVpZ2h0KCkpKXtcbiAgICAgICAgJCgnLmZ1bGxzY3JlZW4tYmcnKS5oaWRlKCk7XG4gICAgICAgICQoJy5ob21lVGV4dCcpLmhpZGUoKTtcbiAgICAgICAgJCgnZm9vdGVyJykuc2hvdygpO1xuICAgIH1lbHNle1xuICAgICAgICAkKCcuZnVsbHNjcmVlbi1iZycpLnNob3coKTtcbiAgICAgICAgJCgnLmhvbWVUZXh0Jykuc2hvdygpO1xuICAgICAgICAkKCdmb290ZXInKS5oaWRlKCk7XG4gICAgfVxufVxuXG4vL21hZGUgYnkgdmlwdWwgbWlyYWprYXIgdGhldmlwdWxtLmFwcHNwb3QuY29tXG52YXIgVHh0VHlwZSA9IGZ1bmN0aW9uKGVsLCB0b1JvdGF0ZSwgcGVyaW9kKSB7XG4gICAgdGhpcy50b1JvdGF0ZSA9IHRvUm90YXRlO1xuICAgIHRoaXMuZWwgPSBlbDtcbiAgICB0aGlzLmxvb3BOdW0gPSAwO1xuICAgIHRoaXMucGVyaW9kID0gcGFyc2VJbnQocGVyaW9kLCAxMCkgfHwgMjAwMDtcbiAgICB0aGlzLnR4dCA9ICcnO1xuICAgIHRoaXMudGljaygpO1xuICAgIHRoaXMuaXNEZWxldGluZyA9IGZhbHNlO1xufTtcblxuVHh0VHlwZS5wcm90b3R5cGUudGljayA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBpID0gdGhpcy5sb29wTnVtICUgdGhpcy50b1JvdGF0ZS5sZW5ndGg7XG4gICAgdmFyIGZ1bGxUeHQgPSB0aGlzLnRvUm90YXRlW2ldO1xuXG4gICAgaWYgKHRoaXMuaXNEZWxldGluZykge1xuICAgICAgICB0aGlzLnR4dCA9IGZ1bGxUeHQuc3Vic3RyaW5nKDAsIHRoaXMudHh0Lmxlbmd0aCAtIDEpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMudHh0ID0gZnVsbFR4dC5zdWJzdHJpbmcoMCwgdGhpcy50eHQubGVuZ3RoICsgMSk7XG4gICAgfVxuXG4gICAgdGhpcy5lbC5pbm5lckhUTUwgPSAnPHNwYW4gY2xhc3M9XCJ3cmFwXCI+Jyt0aGlzLnR4dCsnPC9zcGFuPic7XG5cbiAgICB2YXIgdGhhdCA9IHRoaXM7XG4gICAgdmFyIGRlbHRhID0gMjAwIC0gTWF0aC5yYW5kb20oKSAqIDEwMDtcblxuICAgIGlmICh0aGlzLmlzRGVsZXRpbmcpIHsgZGVsdGEgLz0gMjsgfVxuXG4gICAgaWYgKCF0aGlzLmlzRGVsZXRpbmcgJiYgdGhpcy50eHQgPT09IGZ1bGxUeHQpIHtcbiAgICAgICAgZGVsdGEgPSB0aGlzLnBlcmlvZDtcbiAgICAgICAgdGhpcy5pc0RlbGV0aW5nID0gdHJ1ZTtcbiAgICB9IGVsc2UgaWYgKHRoaXMuaXNEZWxldGluZyAmJiB0aGlzLnR4dCA9PT0gJycpIHtcbiAgICAgICAgdGhpcy5pc0RlbGV0aW5nID0gZmFsc2U7XG4gICAgICAgIHRoaXMubG9vcE51bSsrO1xuICAgICAgICBkZWx0YSA9IDEwMDA7XG4gICAgfVxuXG4gICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgdGhhdC50aWNrKCk7XG4gICAgfSwgZGVsdGEpO1xufTtcblxuJChkb2N1bWVudCkucmVhZHkoZnVuY3Rpb24oKSB7XG4gICAgLy8gdmFyIHBhdHRlcm4gPSBUcmlhbmdsaWZ5KHtcbiAgICAvLyAgICAgd2lkdGg6ICQod2luZG93KS53aWR0aCgpLFxuICAgIC8vICAgICBoZWlnaHQ6ICQod2luZG93KS5oZWlnaHQoKSxcbiAgICAvLyAgICAgY2VsbF9zaXplOiAzMDAsXG4gICAgLy8gICAgIHhfY29sb3JzOiBbJyMyQjJCMkInLCcjMzAzMzM1JywgJyMzQjNGNDEnLCcjMzAzMzM1JywnIzNCM0Y0MScsJyMzMDMzMzUnLCcjMkIyQjJCJ10sXG4gICAgLy8gICAgIHlfY29sb3JzOiBbJyMyQjJCMkInLCcjMzAzMzM1JywgJyMzQjNGNDEnLCcjMzAzMzM1JywnIzNCM0Y0MScsJyMzMDMzMzUnLCcjMkIyQjJCJ11cbiAgICAvLyB9KTtcbiAgICAvL1xuICAgIC8vICQoJy5wb2x5LWJhY2tncm91bmQnKS5hcHBlbmQocGF0dGVybi5jYW52YXMoKSk7XG4gICAgJCgnLnBhZ2UtY29udGVudCcpLmNzcygnYmFja2dyb3VuZC1jb2xvcicsICd0cmFuc3BhcmVudCcpO1xuXG4gICAgdXBkYXRlQmFja2dyb3VuZCgpO1xuXG4gICAgJCgnYm9keScpLnNjcm9sbHNweSgpO1xuXG4gICAgdmFyIGVsZW1lbnRzID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgndHlwZXdyaXRlJyk7XG4gICAgZm9yICh2YXIgaT0wOyBpPGVsZW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciB0b1JvdGF0ZSA9IGVsZW1lbnRzW2ldLmdldEF0dHJpYnV0ZSgnZGF0YS10eXBlJyk7XG4gICAgICAgIHZhciBwZXJpb2QgPSBlbGVtZW50c1tpXS5nZXRBdHRyaWJ1dGUoJ2RhdGEtcGVyaW9kJyk7XG4gICAgICAgIGlmICh0b1JvdGF0ZSkge1xuICAgICAgICAgICAgbmV3IFR4dFR5cGUoZWxlbWVudHNbaV0sIEpTT04ucGFyc2UodG9Sb3RhdGUpLCBwZXJpb2QpO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8vIElOSkVDVCBDU1NcbiAgICB2YXIgY3NzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInN0eWxlXCIpO1xuICAgIGNzcy50eXBlID0gXCJ0ZXh0L2Nzc1wiO1xuICAgIGNzcy5pbm5lckhUTUwgPSBcIi50eXBld3JpdGUgPiAud3JhcCB7IGJvcmRlci1yaWdodDogMC4wOGVtIHNvbGlkICNmZmZ9XCI7XG4gICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChjc3MpO1xuXG4gICAgJChcIiNuYXYgdWwgbGkgYVtocmVmXj0nIyddXCIpLm9uKCdjbGljaycsIGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgLy8gcHJldmVudCBkZWZhdWx0IGFuY2hvciBjbGljayBiZWhhdmlvclxuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICAgICAgLy8gc3RvcmUgaGFzaFxuICAgICAgICB2YXIgaGFzaCA9IHRoaXMuaGFzaDtcblxuICAgICAgICAvLyBhbmltYXRlXG4gICAgICAgICQoJ2h0bWwsIGJvZHknKS5hbmltYXRlKHtcbiAgICAgICAgICAgIHNjcm9sbFRvcDogJChoYXNoKS5vZmZzZXQoKS50b3BcbiAgICAgICAgfSwgMTAwMCwgZnVuY3Rpb24oKXtcblxuICAgICAgICAgICAgLy8gd2hlbiBkb25lLCBhZGQgaGFzaCB0byB1cmxcbiAgICAgICAgICAgIC8vIChkZWZhdWx0IGNsaWNrIGJlaGF2aW91cilcbiAgICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5oYXNoID0gaGFzaDtcbiAgICAgICAgfSk7XG5cbiAgICB9KTtcblxufSk7XG5cbnZhciBpdGVyYXRlID0gZmFsc2U7XG4kKHdpbmRvdykucmVhZHkoZnVuY3Rpb24oKXtcbiAgICBpdGVyYXRlID0gJCgnLmFib3V0LWltYWdlJykuZWFjaChmdW5jdGlvbigpe1xuICAgICAgICB2YXIgaW1hZ2VFbGVtZW50ID0gJCh0aGlzKTtcbiAgICAgICAgdmFyIGltYWdlID0gJCh0aGlzKS5kYXRhKCdpbWFnZScpO1xuXG4gICAgICAgIGlmKGltYWdlLmxlbmd0aCAhPSAwKXtcbiAgICAgICAgICAgIHZhciBpbWcgPSAkKCc8aW1nIC8+JykuYXR0cih7XG4gICAgICAgICAgICAgICAgJ3NyYyc6IGltYWdlLFxuICAgICAgICAgICAgfSkub24oJ2xvYWQnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBpbWFnZUVsZW1lbnQuY3NzKCdiYWNrZ3JvdW5kJywgJ3VybChcIicraW1hZ2UrJ1wiKSBjZW50ZXIgY2VudGVyJyk7XG4gICAgICAgICAgICAgICAgaW1hZ2VFbGVtZW50LmNzcygnYmFja2dyb3VuZC1zaXplJywgJ2NvdmVyJyk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgLy9XYW50IGl0IHRvIGxvYWQgbXkgYWJvdXQgaW1hZ2UgZmlyc3RcbiAgICAkLndoZW4oaXRlcmF0ZSkudGhlbihmdW5jdGlvbigpe1xuICAgICAgICBsb2FkT3RoZXJJbWFnZXMoKTtcbiAgICB9KTtcblxufSk7XG5cbmZ1bmN0aW9uIGxvYWRPdGhlckltYWdlcygpe1xuICAgICQoJy5wcm9qZWN0LWltYWdlJykuZWFjaChmdW5jdGlvbigpe1xuICAgICAgICB2YXIgaW1hZ2VFbGVtZW50ID0gJCh0aGlzKTtcbiAgICAgICAgdmFyIGltYWdlID0gJCh0aGlzKS5kYXRhKCdpbWFnZScpO1xuXG4gICAgICAgIGlmKGltYWdlLmxlbmd0aCAhPSAwKXtcbiAgICAgICAgICAgIHZhciBpbWcgPSAkKCc8aW1nIC8+JykuYXR0cih7XG4gICAgICAgICAgICAgICAgJ3NyYyc6IGltYWdlLFxuICAgICAgICAgICAgfSkub24oJ2xvYWQnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBpbWFnZUVsZW1lbnQuYXR0cignc3JjJywgaW1hZ2UpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICAkKCcucHJvamVjdC1iZy1pbWFnZScpLmVhY2goZnVuY3Rpb24oKXtcbiAgICAgICAgdmFyIGltYWdlRWxlbWVudCA9ICQodGhpcyk7XG4gICAgICAgIHZhciBpbWFnZSA9ICQodGhpcykuZGF0YSgnaW1hZ2UnKTtcblxuICAgICAgICBpZihpbWFnZS5sZW5ndGggIT0gMCl7XG4gICAgICAgICAgICB2YXIgaW1nID0gJCgnPGltZyAvPicpLmF0dHIoe1xuICAgICAgICAgICAgICAgICdzcmMnOiBpbWFnZSxcbiAgICAgICAgICAgIH0pLm9uKCdsb2FkJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgaW1hZ2VFbGVtZW50LmNzcygnYmFja2dyb3VuZCcsICd1cmwoXCInK2ltYWdlKydcIikgY2VudGVyIGNlbnRlcicpO1xuICAgICAgICAgICAgICAgIGltYWdlRWxlbWVudC5jc3MoJ2JhY2tncm91bmQtc2l6ZScsICdjb3ZlcicpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgICQoZnVuY3Rpb24oKSB7XG4gICAgICAgICQoJy5sYXp5JykuTGF6eSh7XG5cbiAgICAgICAgfSk7XG4gICAgfSk7XG59XG5cbnZhciAkY2Fyb3VzZWwgPSAkKCcjY2Fyb3VzZWxFeGFtcGxlSW5kaWNhdG9ycycpO1xuJGNhcm91c2VsLmNhcm91c2VsKCk7XG52YXIgaGFuZGxlZD1mYWxzZTsvL2dsb2JhbCB2YXJpYWJsZVxuXG4kY2Fyb3VzZWwuYmluZCgnc2xpZGUuYnMuY2Fyb3VzZWwnLCBmdW5jdGlvbiAoZSkge1xuICAgIHZhciBjdXJyZW50PSQoZS50YXJnZXQpLmZpbmQoJy5jYXJvdXNlbC1pdGVtLmFjdGl2ZScpO1xuICAgIHZhciBpbmR4PSQoY3VycmVudCkuaW5kZXgoKTtcblxuICAgIGlmKChpbmR4KzIpPiQoJy5jYXJvdXNlbC1pbmRpY2F0b3JzIGxpJykubGVuZ3RoKVxuICAgICAgICBpbmR4PS0xXG4gICAgaWYoIWhhbmRsZWQpXG4gICAge1xuICAgICAgICAkKCcuY2Fyb3VzZWwtaW5kaWNhdG9ycyBsaScpLnJlbW92ZUNsYXNzKCdhY3RpdmUnKVxuICAgICAgICAkKCcuY2Fyb3VzZWwtaW5kaWNhdG9ycyBsaTpudGgtY2hpbGQoJysoaW5keCsyKSsnKScpLmFkZENsYXNzKCdhY3RpdmUnKTtcbiAgICB9XG4gICAgZWxzZVxuICAgIHtcbiAgICAgICAgaGFuZGxlZD0haGFuZGxlZDsvL2lmIGhhbmRsZWQ9dHJ1ZSBtYWtlIGl0IGJhY2sgdG8gZmFsc2UgdG8gd29yayBub3JtYWxseS5cbiAgICB9XG59KTtcblxuJChcIi5jYXJvdXNlbC1pbmRpY2F0b3JzIGxpXCIpLm9uKCdjbGljaycsZnVuY3Rpb24oKXtcbiAgICAvL0NsaWNrIGV2ZW50IGZvciBpbmRpY2F0b3JzXG4gICAgJCh0aGlzKS5hZGRDbGFzcygnYWN0aXZlJykuc2libGluZ3MoKS5yZW1vdmVDbGFzcygnYWN0aXZlJyk7XG4gICAgLy9yZW1vdmUgc2libGluZ3MgYWN0aXZlIGNsYXNzIGFuZCBhZGQgaXQgdG8gY3VycmVudCBjbGlja2VkIGl0ZW1cbiAgICBoYW5kbGVkPXRydWU7IC8vc2V0IGdsb2JhbCB2YXJpYWJsZSB0byB0cnVlIHRvIGlkZW50aWZ5IHdoZXRoZXIgaW5kaWNhdG9yIGNoYW5naW5nIHdhcyBoYW5kbGVkIG9yIG5vdC5cbn0pO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==