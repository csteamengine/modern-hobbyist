(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["/js/index"],{

/***/ "./resources/js/frontend/index.js":
/*!****************************************!*\
  !*** ./resources/js/frontend/index.js ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports) {

$(window).scroll(function () {
  updateBackground();
});

function updateBackground() {
  if ($(window).scrollTop() >= $('#about').offset().top - $('#nav').outerHeight() && $(window).scrollTop() < $('#career').offset().top - $('#nav').outerHeight()) {
    $('.fullscreen-bg').hide();
    $('.homeText').hide();
    $('footer').hide();
  } else if ($(window).scrollTop() >= $('#career').offset().top - $('#nav').outerHeight()) {
    $('.fullscreen-bg').hide();
    $('.homeText').hide();
    $('footer').show();
  } else {
    $('.fullscreen-bg').show();
    $('.homeText').show();
    $('footer').hide();
  }
} //made by vipul mirajkar thevipulm.appspot.com


var TxtType = function TxtType(el, toRotate, period) {
  this.toRotate = toRotate;
  this.el = el;
  this.loopNum = 0;
  this.period = parseInt(period, 10) || 2000;
  this.txt = '';
  this.tick();
  this.isDeleting = false;
};

TxtType.prototype.tick = function () {
  var i = this.loopNum % this.toRotate.length;
  var fullTxt = this.toRotate[i];

  if (this.isDeleting) {
    this.txt = fullTxt.substring(0, this.txt.length - 1);
  } else {
    this.txt = fullTxt.substring(0, this.txt.length + 1);
  }

  this.el.innerHTML = '<span class="wrap">' + this.txt + '</span>';
  var that = this;
  var delta = 200 - Math.random() * 100;

  if (this.isDeleting) {
    delta /= 2;
  }

  if (!this.isDeleting && this.txt === fullTxt) {
    delta = this.period;
    this.isDeleting = true;
  } else if (this.isDeleting && this.txt === '') {
    this.isDeleting = false;
    this.loopNum++;
    delta = 1000;
  }

  setTimeout(function () {
    that.tick();
  }, delta);
};

$(document).ready(function () {
  // var pattern = Trianglify({
  //     width: $(window).width(),
  //     height: $(window).height(),
  //     cell_size: 300,
  //     x_colors: ['#2B2B2B','#303335', '#3B3F41','#303335','#3B3F41','#303335','#2B2B2B'],
  //     y_colors: ['#2B2B2B','#303335', '#3B3F41','#303335','#3B3F41','#303335','#2B2B2B']
  // });
  //
  // $('.poly-background').append(pattern.canvas());
  $('.page-content').css('background-color', 'transparent');
  updateBackground();
  $('body').scrollspy();
  var elements = document.getElementsByClassName('typewrite');

  for (var i = 0; i < elements.length; i++) {
    var toRotate = elements[i].getAttribute('data-type');
    var period = elements[i].getAttribute('data-period');

    if (toRotate) {
      new TxtType(elements[i], JSON.parse(toRotate), period);
    }
  } // INJECT CSS


  var css = document.createElement("style");
  css.type = "text/css";
  css.innerHTML = ".typewrite > .wrap { border-right: 0.08em solid #fff}";
  document.body.appendChild(css);
  $("#nav ul li a[href^='#']").on('click', function (e) {
    // prevent default anchor click behavior
    e.preventDefault(); // store hash

    var hash = this.hash; // animate

    $('html, body').animate({
      scrollTop: $(hash).offset().top
    }, 1000, function () {
      // when done, add hash to url
      // (default click behaviour)
      window.location.hash = hash;
    });
  });
});
$(window).ready(function () {
  $('.project-image').each(function () {
    var imageElement = $(this);
    var image = $(this).data('image');

    if (image.length != 0) {
      var img = $('<img />').attr({
        'src': image
      }).on('load', function () {
        imageElement.attr('src', image); // imageElement.css('background', 'url("'+image+'") center center');
        // imageElement.css('background-size', 'cover');
      });
    }
  });
  $('.project-bg-image').each(function () {
    var imageElement = $(this);
    var image = $(this).data('image');

    if (image.length != 0) {
      var img = $('<img />').attr({
        'src': image
      }).on('load', function () {
        imageElement.css('background', 'url("' + image + '") center center');
        imageElement.css('background-size', 'cover');
      });
    }
  });
  $.ajax({
    type: 'GET',
    url: 'https://www.googleapis.com/youtube/v3/channels',
    data: {
      key: '',
      part: 'statistics',
      id: ''
    },
    success: function success(data) {
      $('#youtubeVideoCount').html(data.items[0].statistics.videoCount);
    },
    error: function error(response) {
      console.log("Request Failed");
    }
  });
});
var $carousel = $('#carouselExampleIndicators');
$carousel.carousel();
var handled = false; //global variable

$carousel.bind('slide.bs.carousel', function (e) {
  var current = $(e.target).find('.carousel-item.active');
  var indx = $(current).index();
  if (indx + 2 > $('.carousel-indicators li').length) indx = -1;

  if (!handled) {
    $('.carousel-indicators li').removeClass('active');
    $('.carousel-indicators li:nth-child(' + (indx + 2) + ')').addClass('active');
  } else {
    handled = !handled; //if handled=true make it back to false to work normally.
  }
});
$(".carousel-indicators li").on('click', function () {
  //Click event for indicators
  $(this).addClass('active').siblings().removeClass('active'); //remove siblings active class and add it to current clicked item

  handled = true; //set global variable to true to identify whether indicator changing was handled or not.
});

/***/ }),

/***/ 1:
/*!**********************************************!*\
  !*** multi ./resources/js/frontend/index.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(/*! /Users/gregorysteenhagen/Desktop/Projects/steamengine/resources/js/frontend/index.js */"./resources/js/frontend/index.js");


/***/ })

},[[1,"/js/manifest"]]]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvanMvZnJvbnRlbmQvaW5kZXguanMiXSwibmFtZXMiOlsiJCIsIndpbmRvdyIsInNjcm9sbCIsInVwZGF0ZUJhY2tncm91bmQiLCJzY3JvbGxUb3AiLCJvZmZzZXQiLCJ0b3AiLCJvdXRlckhlaWdodCIsImhpZGUiLCJzaG93IiwiVHh0VHlwZSIsImVsIiwidG9Sb3RhdGUiLCJwZXJpb2QiLCJsb29wTnVtIiwicGFyc2VJbnQiLCJ0eHQiLCJ0aWNrIiwiaXNEZWxldGluZyIsInByb3RvdHlwZSIsImkiLCJsZW5ndGgiLCJmdWxsVHh0Iiwic3Vic3RyaW5nIiwiaW5uZXJIVE1MIiwidGhhdCIsImRlbHRhIiwiTWF0aCIsInJhbmRvbSIsInNldFRpbWVvdXQiLCJkb2N1bWVudCIsInJlYWR5IiwiY3NzIiwic2Nyb2xsc3B5IiwiZWxlbWVudHMiLCJnZXRFbGVtZW50c0J5Q2xhc3NOYW1lIiwiZ2V0QXR0cmlidXRlIiwiSlNPTiIsInBhcnNlIiwiY3JlYXRlRWxlbWVudCIsInR5cGUiLCJib2R5IiwiYXBwZW5kQ2hpbGQiLCJvbiIsImUiLCJwcmV2ZW50RGVmYXVsdCIsImhhc2giLCJhbmltYXRlIiwibG9jYXRpb24iLCJlYWNoIiwiaW1hZ2VFbGVtZW50IiwiaW1hZ2UiLCJkYXRhIiwiaW1nIiwiYXR0ciIsImFqYXgiLCJ1cmwiLCJrZXkiLCJwYXJ0IiwiaWQiLCJzdWNjZXNzIiwiaHRtbCIsIml0ZW1zIiwic3RhdGlzdGljcyIsInZpZGVvQ291bnQiLCJlcnJvciIsInJlc3BvbnNlIiwiY29uc29sZSIsImxvZyIsIiRjYXJvdXNlbCIsImNhcm91c2VsIiwiaGFuZGxlZCIsImJpbmQiLCJjdXJyZW50IiwidGFyZ2V0IiwiZmluZCIsImluZHgiLCJpbmRleCIsInJlbW92ZUNsYXNzIiwiYWRkQ2xhc3MiLCJzaWJsaW5ncyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUFBLENBQUMsQ0FBQ0MsTUFBRCxDQUFELENBQVVD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QUFDQTNDLEdBQUMsQ0FBQyxJQUFELENBQUQsQ0FBUStFLFFBQVIsQ0FBaUIsUUFBakIsRUFBMkJDLFFBQTNCLEdBQXNDRixXQUF0QyxDQUFrRCxRQUFsRCxFQUY4QyxDQUc5Qzs7QUFDQVAsU0FBTyxHQUFDLElBQVIsQ0FKOEMsQ0FJaEM7QUFDakIsQ0FMRCxFIiwiZmlsZSI6Ii9qcy9pbmRleC5qcyIsInNvdXJjZXNDb250ZW50IjpbIiQod2luZG93KS5zY3JvbGwoZnVuY3Rpb24oKSB7XG4gICAgdXBkYXRlQmFja2dyb3VuZCgpO1xufSk7XG5cbmZ1bmN0aW9uIHVwZGF0ZUJhY2tncm91bmQoKXtcbiAgICBpZigkKHdpbmRvdykuc2Nyb2xsVG9wKCkgPj0gKCQoJyNhYm91dCcpLm9mZnNldCgpLnRvcCAtICQoJyNuYXYnKS5vdXRlckhlaWdodCgpKSAmJiAkKHdpbmRvdykuc2Nyb2xsVG9wKCkgPCAoJCgnI2NhcmVlcicpLm9mZnNldCgpLnRvcCAtICQoJyNuYXYnKS5vdXRlckhlaWdodCgpKSl7XG4gICAgICAgICQoJy5mdWxsc2NyZWVuLWJnJykuaGlkZSgpO1xuICAgICAgICAkKCcuaG9tZVRleHQnKS5oaWRlKCk7XG4gICAgICAgICQoJ2Zvb3RlcicpLmhpZGUoKTtcbiAgICB9ZWxzZSBpZigkKHdpbmRvdykuc2Nyb2xsVG9wKCkgPj0gKCQoJyNjYXJlZXInKS5vZmZzZXQoKS50b3AgLSAkKCcjbmF2Jykub3V0ZXJIZWlnaHQoKSkpe1xuICAgICAgICAkKCcuZnVsbHNjcmVlbi1iZycpLmhpZGUoKTtcbiAgICAgICAgJCgnLmhvbWVUZXh0JykuaGlkZSgpO1xuICAgICAgICAkKCdmb290ZXInKS5zaG93KCk7XG4gICAgfWVsc2V7XG4gICAgICAgICQoJy5mdWxsc2NyZWVuLWJnJykuc2hvdygpO1xuICAgICAgICAkKCcuaG9tZVRleHQnKS5zaG93KCk7XG4gICAgICAgICQoJ2Zvb3RlcicpLmhpZGUoKTtcbiAgICB9XG59XG5cbi8vbWFkZSBieSB2aXB1bCBtaXJhamthciB0aGV2aXB1bG0uYXBwc3BvdC5jb21cbnZhciBUeHRUeXBlID0gZnVuY3Rpb24oZWwsIHRvUm90YXRlLCBwZXJpb2QpIHtcbiAgICB0aGlzLnRvUm90YXRlID0gdG9Sb3RhdGU7XG4gICAgdGhpcy5lbCA9IGVsO1xuICAgIHRoaXMubG9vcE51bSA9IDA7XG4gICAgdGhpcy5wZXJpb2QgPSBwYXJzZUludChwZXJpb2QsIDEwKSB8fCAyMDAwO1xuICAgIHRoaXMudHh0ID0gJyc7XG4gICAgdGhpcy50aWNrKCk7XG4gICAgdGhpcy5pc0RlbGV0aW5nID0gZmFsc2U7XG59O1xuXG5UeHRUeXBlLnByb3RvdHlwZS50aWNrID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGkgPSB0aGlzLmxvb3BOdW0gJSB0aGlzLnRvUm90YXRlLmxlbmd0aDtcbiAgICB2YXIgZnVsbFR4dCA9IHRoaXMudG9Sb3RhdGVbaV07XG5cbiAgICBpZiAodGhpcy5pc0RlbGV0aW5nKSB7XG4gICAgICAgIHRoaXMudHh0ID0gZnVsbFR4dC5zdWJzdHJpbmcoMCwgdGhpcy50eHQubGVuZ3RoIC0gMSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy50eHQgPSBmdWxsVHh0LnN1YnN0cmluZygwLCB0aGlzLnR4dC5sZW5ndGggKyAxKTtcbiAgICB9XG5cbiAgICB0aGlzLmVsLmlubmVySFRNTCA9ICc8c3BhbiBjbGFzcz1cIndyYXBcIj4nK3RoaXMudHh0Kyc8L3NwYW4+JztcblxuICAgIHZhciB0aGF0ID0gdGhpcztcbiAgICB2YXIgZGVsdGEgPSAyMDAgLSBNYXRoLnJhbmRvbSgpICogMTAwO1xuXG4gICAgaWYgKHRoaXMuaXNEZWxldGluZykgeyBkZWx0YSAvPSAyOyB9XG5cbiAgICBpZiAoIXRoaXMuaXNEZWxldGluZyAmJiB0aGlzLnR4dCA9PT0gZnVsbFR4dCkge1xuICAgICAgICBkZWx0YSA9IHRoaXMucGVyaW9kO1xuICAgICAgICB0aGlzLmlzRGVsZXRpbmcgPSB0cnVlO1xuICAgIH0gZWxzZSBpZiAodGhpcy5pc0RlbGV0aW5nICYmIHRoaXMudHh0ID09PSAnJykge1xuICAgICAgICB0aGlzLmlzRGVsZXRpbmcgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5sb29wTnVtKys7XG4gICAgICAgIGRlbHRhID0gMTAwMDtcbiAgICB9XG5cbiAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICB0aGF0LnRpY2soKTtcbiAgICB9LCBkZWx0YSk7XG59O1xuXG4kKGRvY3VtZW50KS5yZWFkeShmdW5jdGlvbigpIHtcbiAgICAvLyB2YXIgcGF0dGVybiA9IFRyaWFuZ2xpZnkoe1xuICAgIC8vICAgICB3aWR0aDogJCh3aW5kb3cpLndpZHRoKCksXG4gICAgLy8gICAgIGhlaWdodDogJCh3aW5kb3cpLmhlaWdodCgpLFxuICAgIC8vICAgICBjZWxsX3NpemU6IDMwMCxcbiAgICAvLyAgICAgeF9jb2xvcnM6IFsnIzJCMkIyQicsJyMzMDMzMzUnLCAnIzNCM0Y0MScsJyMzMDMzMzUnLCcjM0IzRjQxJywnIzMwMzMzNScsJyMyQjJCMkInXSxcbiAgICAvLyAgICAgeV9jb2xvcnM6IFsnIzJCMkIyQicsJyMzMDMzMzUnLCAnIzNCM0Y0MScsJyMzMDMzMzUnLCcjM0IzRjQxJywnIzMwMzMzNScsJyMyQjJCMkInXVxuICAgIC8vIH0pO1xuICAgIC8vXG4gICAgLy8gJCgnLnBvbHktYmFja2dyb3VuZCcpLmFwcGVuZChwYXR0ZXJuLmNhbnZhcygpKTtcbiAgICAkKCcucGFnZS1jb250ZW50JykuY3NzKCdiYWNrZ3JvdW5kLWNvbG9yJywgJ3RyYW5zcGFyZW50Jyk7XG5cbiAgICB1cGRhdGVCYWNrZ3JvdW5kKCk7XG5cbiAgICAkKCdib2R5Jykuc2Nyb2xsc3B5KCk7XG5cbiAgICB2YXIgZWxlbWVudHMgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCd0eXBld3JpdGUnKTtcbiAgICBmb3IgKHZhciBpPTA7IGk8ZWxlbWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIHRvUm90YXRlID0gZWxlbWVudHNbaV0uZ2V0QXR0cmlidXRlKCdkYXRhLXR5cGUnKTtcbiAgICAgICAgdmFyIHBlcmlvZCA9IGVsZW1lbnRzW2ldLmdldEF0dHJpYnV0ZSgnZGF0YS1wZXJpb2QnKTtcbiAgICAgICAgaWYgKHRvUm90YXRlKSB7XG4gICAgICAgICAgICBuZXcgVHh0VHlwZShlbGVtZW50c1tpXSwgSlNPTi5wYXJzZSh0b1JvdGF0ZSksIHBlcmlvZCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLy8gSU5KRUNUIENTU1xuICAgIHZhciBjc3MgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3R5bGVcIik7XG4gICAgY3NzLnR5cGUgPSBcInRleHQvY3NzXCI7XG4gICAgY3NzLmlubmVySFRNTCA9IFwiLnR5cGV3cml0ZSA+IC53cmFwIHsgYm9yZGVyLXJpZ2h0OiAwLjA4ZW0gc29saWQgI2ZmZn1cIjtcbiAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGNzcyk7XG5cbiAgICAkKFwiI25hdiB1bCBsaSBhW2hyZWZePScjJ11cIikub24oJ2NsaWNrJywgZnVuY3Rpb24oZSkge1xuICAgICAgICAvLyBwcmV2ZW50IGRlZmF1bHQgYW5jaG9yIGNsaWNrIGJlaGF2aW9yXG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcblxuICAgICAgICAvLyBzdG9yZSBoYXNoXG4gICAgICAgIHZhciBoYXNoID0gdGhpcy5oYXNoO1xuXG4gICAgICAgIC8vIGFuaW1hdGVcbiAgICAgICAgJCgnaHRtbCwgYm9keScpLmFuaW1hdGUoe1xuICAgICAgICAgICAgc2Nyb2xsVG9wOiAkKGhhc2gpLm9mZnNldCgpLnRvcFxuICAgICAgICB9LCAxMDAwLCBmdW5jdGlvbigpe1xuXG4gICAgICAgICAgICAvLyB3aGVuIGRvbmUsIGFkZCBoYXNoIHRvIHVybFxuICAgICAgICAgICAgLy8gKGRlZmF1bHQgY2xpY2sgYmVoYXZpb3VyKVxuICAgICAgICAgICAgd2luZG93LmxvY2F0aW9uLmhhc2ggPSBoYXNoO1xuICAgICAgICB9KTtcblxuICAgIH0pO1xuXG59KTtcblxuJCh3aW5kb3cpLnJlYWR5KGZ1bmN0aW9uKCl7XG4gICAgJCgnLnByb2plY3QtaW1hZ2UnKS5lYWNoKGZ1bmN0aW9uKCl7XG4gICAgICAgIHZhciBpbWFnZUVsZW1lbnQgPSAkKHRoaXMpO1xuICAgICAgICB2YXIgaW1hZ2UgPSAkKHRoaXMpLmRhdGEoJ2ltYWdlJyk7XG5cbiAgICAgICAgaWYoaW1hZ2UubGVuZ3RoICE9IDApe1xuICAgICAgICAgICAgdmFyIGltZyA9ICQoJzxpbWcgLz4nKS5hdHRyKHtcbiAgICAgICAgICAgICAgICAnc3JjJzogaW1hZ2UsXG4gICAgICAgICAgICB9KS5vbignbG9hZCcsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIGltYWdlRWxlbWVudC5hdHRyKCdzcmMnLCBpbWFnZSk7XG4gICAgICAgICAgICAgICAgLy8gaW1hZ2VFbGVtZW50LmNzcygnYmFja2dyb3VuZCcsICd1cmwoXCInK2ltYWdlKydcIikgY2VudGVyIGNlbnRlcicpO1xuICAgICAgICAgICAgICAgIC8vIGltYWdlRWxlbWVudC5jc3MoJ2JhY2tncm91bmQtc2l6ZScsICdjb3ZlcicpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICAkKCcucHJvamVjdC1iZy1pbWFnZScpLmVhY2goZnVuY3Rpb24oKXtcbiAgICAgICAgdmFyIGltYWdlRWxlbWVudCA9ICQodGhpcyk7XG4gICAgICAgIHZhciBpbWFnZSA9ICQodGhpcykuZGF0YSgnaW1hZ2UnKTtcblxuICAgICAgICBpZihpbWFnZS5sZW5ndGggIT0gMCl7XG4gICAgICAgICAgICB2YXIgaW1nID0gJCgnPGltZyAvPicpLmF0dHIoe1xuICAgICAgICAgICAgICAgICdzcmMnOiBpbWFnZSxcbiAgICAgICAgICAgIH0pLm9uKCdsb2FkJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgaW1hZ2VFbGVtZW50LmNzcygnYmFja2dyb3VuZCcsICd1cmwoXCInK2ltYWdlKydcIikgY2VudGVyIGNlbnRlcicpO1xuICAgICAgICAgICAgICAgIGltYWdlRWxlbWVudC5jc3MoJ2JhY2tncm91bmQtc2l6ZScsICdjb3ZlcicpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICAkLmFqYXgoe1xuICAgICAgICB0eXBlOiAnR0VUJyxcbiAgICAgICAgdXJsOiAnaHR0cHM6Ly93d3cuZ29vZ2xlYXBpcy5jb20veW91dHViZS92My9jaGFubmVscycsXG4gICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgIGtleTogJycsXG4gICAgICAgICAgICBwYXJ0OiAnc3RhdGlzdGljcycsXG4gICAgICAgICAgICBpZDogJydcbiAgICAgICAgfSxcbiAgICAgICAgc3VjY2VzczogZnVuY3Rpb24oZGF0YSl7XG4gICAgICAgICAgICAkKCcjeW91dHViZVZpZGVvQ291bnQnKS5odG1sKGRhdGEuaXRlbXNbMF0uc3RhdGlzdGljcy52aWRlb0NvdW50KTtcbiAgICAgICAgfSxcbiAgICAgICAgZXJyb3I6IGZ1bmN0aW9uKHJlc3BvbnNlKXtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiUmVxdWVzdCBGYWlsZWRcIik7XG4gICAgICAgIH1cbiAgICB9KTtcbn0pO1xuXG52YXIgJGNhcm91c2VsID0gJCgnI2Nhcm91c2VsRXhhbXBsZUluZGljYXRvcnMnKTtcbiRjYXJvdXNlbC5jYXJvdXNlbCgpO1xudmFyIGhhbmRsZWQ9ZmFsc2U7Ly9nbG9iYWwgdmFyaWFibGVcblxuJGNhcm91c2VsLmJpbmQoJ3NsaWRlLmJzLmNhcm91c2VsJywgZnVuY3Rpb24gKGUpIHtcbiAgICB2YXIgY3VycmVudD0kKGUudGFyZ2V0KS5maW5kKCcuY2Fyb3VzZWwtaXRlbS5hY3RpdmUnKTtcbiAgICB2YXIgaW5keD0kKGN1cnJlbnQpLmluZGV4KCk7XG5cbiAgICBpZigoaW5keCsyKT4kKCcuY2Fyb3VzZWwtaW5kaWNhdG9ycyBsaScpLmxlbmd0aClcbiAgICAgICAgaW5keD0tMVxuICAgIGlmKCFoYW5kbGVkKVxuICAgIHtcbiAgICAgICAgJCgnLmNhcm91c2VsLWluZGljYXRvcnMgbGknKS5yZW1vdmVDbGFzcygnYWN0aXZlJylcbiAgICAgICAgJCgnLmNhcm91c2VsLWluZGljYXRvcnMgbGk6bnRoLWNoaWxkKCcrKGluZHgrMikrJyknKS5hZGRDbGFzcygnYWN0aXZlJyk7XG4gICAgfVxuICAgIGVsc2VcbiAgICB7XG4gICAgICAgIGhhbmRsZWQ9IWhhbmRsZWQ7Ly9pZiBoYW5kbGVkPXRydWUgbWFrZSBpdCBiYWNrIHRvIGZhbHNlIHRvIHdvcmsgbm9ybWFsbHkuXG4gICAgfVxufSk7XG5cbiQoXCIuY2Fyb3VzZWwtaW5kaWNhdG9ycyBsaVwiKS5vbignY2xpY2snLGZ1bmN0aW9uKCl7XG4gICAgLy9DbGljayBldmVudCBmb3IgaW5kaWNhdG9yc1xuICAgICQodGhpcykuYWRkQ2xhc3MoJ2FjdGl2ZScpLnNpYmxpbmdzKCkucmVtb3ZlQ2xhc3MoJ2FjdGl2ZScpO1xuICAgIC8vcmVtb3ZlIHNpYmxpbmdzIGFjdGl2ZSBjbGFzcyBhbmQgYWRkIGl0IHRvIGN1cnJlbnQgY2xpY2tlZCBpdGVtXG4gICAgaGFuZGxlZD10cnVlOyAvL3NldCBnbG9iYWwgdmFyaWFibGUgdG8gdHJ1ZSB0byBpZGVudGlmeSB3aGV0aGVyIGluZGljYXRvciBjaGFuZ2luZyB3YXMgaGFuZGxlZCBvciBub3QuXG59KTtcbiJdLCJzb3VyY2VSb290IjoiIn0=